<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mario_1_still</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_shadowgrab</parentName>
  <maskName>spr_mario_1_collisions</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x,y-32,obj_camera);
sasdf = 1;
spinjump = 0;
invincible = 0;
invinciblea = 0;
hspeedmax = 2;
instA = 0;
canMove = 0;
azk = 0;
asdf = 0;
time = 0;
select = 0;
inkJump = 0;
x-=8;
jumpnow = 0;
deadReset = 0;
inst = 0;
bcount = 0;
deathY = 256;
btime = 0;
ztrans = 0;
mounted = 0;
shake = 0;
mountJump = 0;
bx = 0;
shake = 0;
rideX = 0;
rideY = 0;
face = 1;
            bumpOff = 0;
        global.skin = 0;
climbing = 0;
hit = 0;
onionTime = 8;
jumphit = 1;
//Coin shadow
instC = obj_cointile;
amiibo = 0;
item = 0;
inkGo = 0;
charge = 0;
abl = 0;
fireDir = 0;
onionAlarm = 2;
onionGone = 0;
cusH = 0;
galH = 0;
    global.theme = 0;
duck = 0;
dead = 0;
qwer = 0;
btime = 0;
bcount = 0;
deadga = 0;
aura = 0;
deadba = 0;
shadow = 0;
col = make_color_rgb(247,205,57);


    //Mario Gear Solid
    _gravity = 0.4;           // Vertical gravity
    _sspeed = 3.25;
    _wspeed = 1.25;             // Maximum speed [Walk]
    _rspeed = 2.5;             // Maximum speed [Run]
    _ylevel = 8;             // Jump height
    _maxfall = 4;           // Maximum fall speed
    _direction = 1;          // Direction | 1: Right / 0: Left
    _friction = 0.2;          // Friction  | Works right if divisible by mspeed &amp; rspeed
    _sacceleration = 2*_friction;
    _invulnerable = 0;
    _walkThrough = 0;
    
    // Normal People's Key config
    /*
    _keyarr[0] = vk_left;   // Left direction key
    _keyarr[1] = vk_right;   // Right direction key
    _keyarr[2] = ord("X");   // Jump key
    _keyarr[3] = ord("Z");   // Run key
    _keyarr[4] = vk_down;   // Slide Key
    _keyarr[5] = vk_up;   // Crawl/Up Key
    */
    
    
    // Gato's Key config
    _keyarr[0] = vk_left;   // Left direction key
    _keyarr[1] = vk_right;   // Right direction key
    _keyarr[2] = ord("X");   // Jump key
    _keyarr[3] = ord("Z");   // Run key
    _keyarr[4] = vk_down;   // Slide Key
    _keyarr[5] = vk_up;   // Crawl/Up Key
    
    
    // Usually, you don't set these ones
    _mspeed = _wspeed;       // Maximum speed
    _xspeed = 0;             // Horizontal motion
    _yspeed = 0;             // Vertical motion
    _flip = 1;               // Sprite flip
    _inair = 0;              // Airborne | 2: No varjump | 1: Varjumped | 0: Ground
    _inwater = 0;
    _doublejump = 1;
    //_swim = 1;
    _candoublejump = 0;
    _canwalljump = 1;
    _slideback = 0;
    _isCrawling = 0;
    _isClimbing = 0;
    _isSliding = 0;
    _isSpinJumping = 0;
    _sidemove = 1;
    _isGroundPound = 0;

//Get some tunez goin'
if room != room_titlescreen_new{
    if global.skin = 0{
        audio_play_music(mus_smb1,true);
    }
    if global.skin = 1{
        audio_play_music(mus_hello,true);
    }
    if global.skin = 4{
        audio_play_music(mus_mariogear,true);
    }
}

//Initialize a selection global
global.selected = 0;

//Spawn shadow
instance_create(x,y,obj_player_shadow);


//Hello Engine
jumpnow = 0
state = 0
direct = 1
alarm[5] = 1
holding = 0
isrun = 0
isjump = 0
skidnow = 0
isswim = 0
hitpoint = 0
isduck = 0
invincible = 0
kk = 0
sizze = 16;
    //Small Mario
    global.state = 0;

//Abducted Galaxy
xspeed = 0;
canattack = 1
stunned = 0
vulnerable = 1
maxspeed = 3
ducking = 0
comingOutOfMinecart = 0
canEndJump = 1
bigjump = 0

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>azk = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shaking
btime = 0;
if bcount = 0{
    if x &gt; bx{
        bcount += 1;
    }
}
if bcount = 1{
    if x &lt; bx{
        bcount += 1;
    }
}
if bcount = 2{
    if x &gt; bx{
        bcount += 1;
    }
}
if bcount = 3{
    if x &lt; bx{
        bcount += 1;
    }
}
if bcount = 4{
    if x &gt; bx{
        bcount += 1;
    }
}
if bcount = 5{
    if x &lt; bx{
        bcount += 1;
    }
}
if bcount = 6{
    if x &gt; bx{
        bcount += 1;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hit = 0;
sasdf = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if hit != 0{
    alarm[7] = 15;
    hit = 3;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if hit != 0{
    hit = 2;
    alarm[8] = 15;
//alarm[6] = 120;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>invinciblea = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
///Handles shaking
btime = 0;
if bcount = 0{
    if x &gt; bx{
        bcount += 1;
    }
}
if bcount = 1{
    if x &lt; bx{
        bcount += 1;
    }
}
if bcount = 2{
    if x &gt; bx{
        bcount += 1;
    }
}
if bcount = 3{
    if x &lt; bx{
        bcount += 1;
    }
}
if bcount = 4{
    if x &gt; bx{
        bcount += 1;
    }
}
if bcount = 5{
    if x &lt; bx{
        bcount += 1;
    }
}
if bcount = 6{
    if x &gt; bx{
        bcount += 1;
    }
}
*/

onion = instance_create(x,y,obj_onion);
onion.sprite_index = self.sprite_index;
onion.image_index = self.image_index;
onion.onionTime = self.onionAlarm;
onionGone = 0;
onionAlarm += 2;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hit = 3;
alarm[6] = 90;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>aura = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles room resetting code

if obj_play.inEditor = 0{
    y = deathY;
    
    //Port on Screen
    view_xport[2] = 0;
    view_yport[2] = 0;
    view_wport[2] = 480;
    view_hport[2] = 320;
    
    //View in Room
    view_xview[2] = 0;
    view_yview[2] = 0;
    view_wview[2] = 480;
    view_hview[2] = 320;
    
    //Resetting the game
    obj_player.canMove = 0;
    obj_tileparent.canMove = 0;
    with obj_solid{
        instance_destroy();
    }
    with obj_solidtop{
        instance_destroy();
    }
    with obj_mushroom_tile{
        instance_destroy();
    }
    sprite_index = spr_mario_1_still;
    obj_goombattle.hspeed = 0;
    obj_koopatile.hspeed = 0;
    obj_kooparedtile.hspeed = 0;
    obj_blocktile.asdf = 0;
    obj_pipetile.gone = 0;
    obj_thwomptile.charge = 0;
    with obj_coinslide{
        instance_destroy();
    }
    with obj_powerupeffect{
        instance_destroy();
    }
    with obj_bill{
        instance_destroy();
    }
    with obj_amiiboshroom{
        instance_destroy();
    }
    with obj_saveblock{
        instance_destroy();
    }
    obj_block_parent.hit = 0;
    obj_block_parent.visible = true;
    background_visible[0] = true;
    obj_cointile.collect = 0;
    obj_flagtile.asdfasasd = 0;
    obj_player.qwer = 0;
    invincible = 0;
    invinciblea = 0;
    obj_player.dead = 0;
    obj_enemyparent.dead = 0;
    obj_enemyparent.deadb = 0;
    obj_play.inEditor = 1;
    instance_activate_all();
    
    
    inEditor = 1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dead = 3;
alarm[2] = 15;
sprite_index = spr_mario_dead;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>time = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hello Engine
if global.skin = 1{
    if state = 0{
        if state = 2
            isjump = 1
        else
            isjump = 0
    }
    
    //Skidding animation fix
    if jumpnow = 0{
        if (hspeed &gt; 0 &amp;&amp; keyboard_check(vk_left)) || (hspeed &lt; 0 &amp;&amp; keyboard_check(vk_right)){
            sprite_index = spr_mario_1_skid;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mounting
if mounted = 1{
    sprite_index = spr_mario_1_flag;
    image_speed = 0;
    
    if keyboard_check_pressed(ord('X')){
        if jumpnow = 0{
            if keyboard_check(vk_up){
                mounted = 0;
                obj_mount_parent.ride = 0;
                rideX = 0;
                rideY = 0;
                JumpY = 0;
                bumpOff = 0;
                visible = true;
                //gravity = 0;
            }
        } else {
            if mountJump = 0{
                if keyboard_check(vk_up){
                    mounted = 0;
                    obj_mount_parent.ride = 0;
                    vspeed = -5;
                    mountJump = 1;
                    obj_mount_parent.vspeed = 1;
                    rideX = 0;
                    rideY = 0;
                    JumpY = 0;
                    bumpOff = 0;
                    visible = true;
                    //gravity = 0;
                }
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Following the editor camera
if deadga = 1{
    if obj_play.inEditor = 1{
        if global.skin = 0{
            sprite_index = spr_mario_dead;
        }
        if global.skin = 1{
            sprite_index = spr_mario_hell_dead;
        }
        if global.skin = 2{
            sprite_index = spr_mario_nova_dead;
        }
        if global.skin = 3{
            sprite_index = spr_mario_galaxy_dead;
        }
        if global.skin = 4{
            sprite_index = spr_mario_mg_dead;
        }
    }
}

if select = 1{
    deadga = 0;
}

/*
if global.skin = 4{
    if jumpnow = 0{
        if _xspeed != 0{
            sprite_index = spr_mario_1_walk;
        } else {
            sprite_index = spr_mario_1_still;
        }
    }
}
*/

//Run the powerup script
script_execute(scr_powerup);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement Code
if amiibo != 6{
if canMove = 1{

//Movement
if climbing = 0{
if (duck = 0 &amp;&amp; jumpnow = 0) || jumpnow = 1 || jumpnow = 2{
if global.skin != 4{
if global.skin != 1{
if dead = 0 &amp;&amp; deadba = 0{
if jumpnow = 0{
if keyboard_check(vk_right){
    //Onion
    if onionGone = 0{
        onionGone = 1;
        alarm[5] = onionTime;
    }
    if global.skin = 0{
        if hspeed &gt;= 0{
            hspeed += 0.075;
        }
        if hspeed &lt; 0{
            hspeed += 0.12;
        }
    }
    if global.skin = 2{
        hspeed += 0.09;
    }
    /*if global.skin = 1{
        if keyboard_check(ord('Z')){
            if hspeed &gt; 0{
                hspeed += 0.05;
            } else {
                hspeed += 0.155;
            }
        } else {
            if hspeed &gt; 0{
                hspeed += 0.042;
            } else {
                hspeed += 0.6;
            }
        }
    }*/
    face = 1;
    image_xscale = 1;
    if vspeed = 0{
        if hspeed &gt; 0{
                sprite_index = spr_mario_1_walk;
        } else {
            if global.skin != 1{
                sprite_index = spr_mario_1_skid;
            }
        }
    }
}

if keyboard_check(vk_left){
    //Onion
    if onionGone = 0{
        onionGone = 1;
        alarm[5] = onionTime;
    }
    
    if global.skin = 0{
        if hspeed &lt;= 0{
            hspeed -= 0.075;
        }
        if hspeed &gt; 0{
            hspeed -= 0.12;
        }
    }
    if global.skin = 2{
        hspeed -= 0.09;
    }
    
    face = 0;
    image_xscale = -1;
    if vspeed = 0{
        if hspeed &lt; 0{
            if !collision_point(x-9,y,obj_solid,false,false){
                sprite_index = spr_mario_1_walk;
            }
        } else {
            if global.skin != 1{
                sprite_index = spr_mario_1_skid;
            }
        }
    }
}
} else {
    if global.skin != 3{
                if keyboard_check(vk_right){
                    //Onion
                    if onionGone = 0{
                        onionGone = 1;
                        alarm[5] = onionTime;
                    }
                    face = 1;
                    if global.skin = 0{
                        hspeed += 0.09/3;
                    }
                    if global.skin = 2{
                        hspeed += 0.09/2;
                    }
                    
                    image_xscale = 1;
                    if vspeed = 0{
                        if hspeed &gt; 0{
                            if !collision_point(x-9,y,obj_solid,false,false){
                                sprite_index = spr_mario_1_walk;
                            }
                        } else {
                            if global.skin != 1{
                                sprite_index = spr_mario_1_skid;
                            }
                        }
                    }
                }
                
                if keyboard_check(vk_left){                
                    //Onion
                    if onionGone = 0{
                        onionGone = 1;
                        alarm[5] = onionTime;
                    }
                    face = 0;
                    if global.skin = 0{
                        hspeed -= 0.09/3;
                    }
                    if global.skin = 2{
                        hspeed -= 0.09/2;
                    }
                    
                    image_xscale = -1;
                    if vspeed = 0{
                        if hspeed &lt; 0{
                            if !collision_point(x-9,y,obj_solid,false,false){
                                sprite_index = spr_mario_1_walk;
                            }
                        } else {
                            if global.skin != 1{
                                sprite_index = spr_mario_1_skid;
                            }
                        }
                    }
                }
                }
                
            }
}
}


} else {
                        //Super Mario Gear Solid Controls
                        if _xspeed &gt; 0{
                            image_xscale = 1;
                            //sprite_index = spr_mario_1_walk;
                        }
                        if _xspeed &lt; 0{
                            image_xscale = -1;
                            //sprite_index = spr_mario_1_walk;
                        }
                        
                        if jumpnow = 0{
                            if _xspeed != 0{
                                sprite_index = spr_mario_1_walk;
                            } else {
                                sprite_index = spr_mario_1_still;
                            }
                        }
                        
                        
                        // Left
                        //if (keyboard_check(_keyarr[0]) &amp;&amp; !_isSliding &amp;&amp; (!_isGroundPound || (_isGroundPound == 1 &amp;&amp; _xspeed = 0)) &amp;&amp; _sidemove) {
                        if (keyboard_check(vk_left)){
                            //_direction = 0; 
                        
                        if (_xspeed &gt; -_mspeed)
                            _xspeed -= _friction; 
                        else
                            _xspeed += _friction;           
                        }
                        
                        // Right
                        if (keyboard_check(vk_right)) {
                            //_direction = 1;
                        
                        if (_xspeed &lt; _mspeed)
                            _xspeed += _friction;
                        else
                            _xspeed = _mspeed;
                        }
}
}
}

//Ducking
if keyboard_check(vk_down){
    if obj_play.inEditor = 0{
        if jumpnow = 0{
            if (global.skin = 0 &amp;&amp; item != 0 &amp;&amp; item != 4) || global.skin != 0 || amiibo != 0{
                duck = 1;
                sprite_index = spr_bigmario_1_duck;
            }
        }
    }
} else {
    if jumpnow = 0{
        duck = 0;
    }
}

if duck = 1{
    if jumpnow = 0{
        if global.skin = 0{
            if hspeed &gt; 0{
                hspeed -= 0.09/1.5;
            }
            if hspeed &lt; 0{
                hspeed += 0.09/1.5;
            }
        }
    }
}

if global.skin != 4{
    if hspeed &gt; hspeedmax {
        hspeed = hspeedmax;
    }
    if hspeed &lt; -hspeedmax {
        hspeed = -hspeedmax;
    }
}



//Running
if global.skin != 4{
if global.skin != 1{
if global.skin = 0{
    if keyboard_check(ord('Z')){
        hspeedmax = 2.9;
    } else {
        hspeedmax = 1.8;
    }
}
}

if global.skin = 2{
    if keyboard_check(ord('Z')){
        hspeedmax = 3.2;
    } else {
        hspeedmax = 2.2;
    }
}
/*if global.skin = 3{
    if keyboard_check(ord('Z')){
        hspeedmax = 2;
    } else {
        hspeedmax = 1.3;
    }
}*/
} else {
    //SMGS running
    if keyboard_check(ord('Z')){
        _mspeed = _rspeed;
    } else {
        _mspeed = _wspeed;
    }
}




if canMove = 1{
    if item = 2{
        if keyboard_check_pressed(ord('Z')){
            if instance_number(obj_mario_fireball) &lt; 2{
                instance_create(x,y+3,obj_mario_fireball);
            }
        }
    }
    if item = 3{
        if keyboard_check_pressed(ord('Z')){
            if instance_number(obj_mario_laser) &lt; 1{
                instance_create(x,y+3,obj_mario_laser);
            }
        }
    }
}


//Slowing down
if global.skin != 1{
    if !keyboard_check(vk_left) &amp;&amp; !keyboard_check(vk_right){
        if global.skin = 0{
            if jumpnow = 0{
                hspeed /= 1.05;
            } else {
                hspeed /= 1.02;
            }
            if hspeed &gt; -0.2 &amp;&amp; hspeed &lt; 0.2{
                hspeed = 0;
            }
        }
        
        if global.skin = 2{
            hspeed /= 1.04;
        }
        if jumpnow = 0{
            if global.skin = 3{
                hspeed /= 1.1;
            }
        }
        if amiibo = 35{
            if jumpnow = 0{
                hspeed = 0;
            }
        }
    }
}

if dead = 0 &amp;&amp; deadba = 0{
    if hspeed = 0 &amp;&amp; _xspeed = 0{
        if vspeed = 0{
            if duck = 0{
                sprite_index = spr_mario_1_still;
            }
        }
    }
}

} //End of climbing test block

//Determing the image speed
if climbing = 0{
if !(amiibo = 10 || amiibo = 21 &amp;&amp; jumpnow = 1){

if spinjump = 0{
if global.skin != 1{

if global.skin = 0{
    if hspeed &gt; 0{
        image_speed = hspeed/10;
    }
    if hspeed &lt; 0{
        image_speed = (hspeed/10) * -1;
    }
}

if global.skin = 2{
    if hspeed &gt; 0{
        image_speed = hspeed/12.5;
    }
    if hspeed &lt; 0{
        image_speed = (hspeed/12.5) * -1;
    }
}
/*if global.skin = 3{
    if hspeed &gt; 0{
        image_speed = hspeed/10;
    }
    if hspeed &lt; 0{
        image_speed = (hspeed/10) * -1;
    }
}*/
if global.skin = 4{
    if _xspeed &gt; 0{
        image_speed = _xspeed/20;
    }
    if _xspeed &lt; 0{
        image_speed = _xspeed/20 * -1;
    }
}
}
} else {
    image_speed = 0.5;
}
/*} else {
    if instance_exists(obj_play){
        if obj_play.inEditor = 0{
            image_speed = 0.5;
            if image_xscale = 1{
                image_angle -= 20;
            } else {
                image_angle += 20;
            }
        }
    }
}*/

} else { //End of climbing code block
    image_speed = vspeed / 10;
}
}

//Jumping
if global.skin != 1{
if !instance_exists(obj_powerup){
    if dead = 0 &amp;&amp; deadba = 0{
        if instance_exists(obj_play){
        //obj_play.inEditor = 0{
        if keyboard_check_pressed(ord('X')){
        
        if jumpnow = 0{
        //Playing the jump sound effects
        if global.skin = 0{
            if item = 0{
                audio_play_sound(snd_smalljump_smb1,0,false);
            } else {
                audio_play_sound(snd_jump_smb1,0,false);
            }
            
            if amiibo = 22{
                instance_create(x,y,obj_jr_copter);
            }
        }
        /*if global.skin = 3{
            if item = 0{
                audio_play_sound(snd_jump_gal,0,false);
            }
        } else */{
            if global.skin != 0{
                audio_play_sound(snd_jump_smw,0,false);
            }
        }
        //No Hello Engine jump sounds go here
        if instance_exists(obj_saveblock){
            with obj_saveblock{instance_destroy();}
        }
        
        }
        
        if global.skin != 1{
        if global.skin != 4{
        
            if global.skin != 3{
                if jumpnow = 0 {
                        if global.skin != 3{
                            if climbing = 0{
                                vspeed = -5;
                            } else {
                                vspeed = -5;
                                if image_xscale = 1{
                                    hspeed = -4;
                                }
                                if image_xscale = -1{
                                    hspeed = 4;
                                }
                            }
                            
                        } else {
                            //vspeed = -7;
                        }
                        jumpnow = 1;
                        if vspeed &lt; 0{
                            if duck = 0{
                                sprite_index = spr_mario_1_jump;
                            }
                        }
                } else {
                    if jumpnow = 0 {
                        if climbing = 0{
                            vspeed = -1.5;
                        } else {
                            vspeed = -1.5;
                            if image_xscale = 1{
                                hspeed = -4;
                            }
                            if image_xscale = -1{
                                hspeed = 4;
                            }
                        }
                        jumpnow = 1;
                        if vspeed &lt; 0{
                            if duck = 0{
                                sprite_index = spr_mario_1_jump;
                            }
                        }
                    }
                }
            }
        } else {
            if global.skin != 3{
                if jumpnow = 0 {
                    //_yspeed = -0.9*85//_ylevel;
                    if climbing = 0{
                            vspeed = -9.5;
                        } else {
                            vspeed = -9.5;
                            if image_xscale = 1{
                                hspeed = -4;
                            }
                            if image_xscale = -1{
                                hspeed = 4;
                            }
                        }
                    jumpnow = 1;
                    
                    if duck = 0{
                        sprite_index = spr_mario_1_jump;
                    }
                    image_speed = 0.5;
                }
            }
        }
        } 
        }
        }
        }
    }
}

//Variable Jumping
if global.skin != 1{

if dead = 0 &amp;&amp; deadba = 0{
if keyboard_check_released(ord('X')) and vspeed &lt; 0 {
    if global.skin != 4{
            vspeed /= 2;
            jumpnow = 1;
            //if jump key is released the jump key the player's jump will be halved
    } else {
        if (vspeed &lt; 0)
        vspeed /= 2;
    }
}
}
}
}

//Fixes some issues
if global.skin != 1{

if global.skin != 4{
    if !collision_rectangle(x-8,y+9,x+8,y+24,obj_solidtop,false,false){
    if !collision_rectangle(x-8,y+9,x+8,y+24,obj_block_parent,false,false){
        jumpnow = 1;
    }
}
}
}

//Gravity and terminal velocity(max fall speed)
if climbing = 0{
if global.skin != 1{

if global.skin != 3{
    if instance_exists(obj_play){
        //obj_play.inEditor = 0{
        if canMove = 1{
            if global.skin != 4{
                if !collision_rectangle(x-7,y,x+7,y+17,obj_solidtop,false,false){// &amp;&amp; !collision_rectangle(x,y,x+8,y+17,obj_block_parent,false,false){
                    if !collision_rectangle(x-6,y+9,x+6,y+17,obj_block_parent,false,true){
                        if !collision_rectangle(x-6,y+4,x+6,y+9,obj_spring,false,true){
                            //Onion
                            if onionGone = 0{
                                onionGone = 1;
                                alarm[5] = onionTime;
                            }
                            
                            gravity = 0.16;
                            if dead &lt; 1{
                                if spinjump = 0{
                                    if duck = 0{
                                        sprite_index = spr_mario_1_jump;
                                    }
                                } else {
                                
                                
                                //Spinjump animation
                                }
                            }
                        } else {
                            //Fix springs
                            if vspeed &gt; 0{
                                vspeed = 0;
                                gravity = 0;
                            }
                        }
                    }
                }
            } else {
                if !collision_rectangle(x,y,x+8,y+17,obj_solidtop,false,false) &amp;&amp; !collision_rectangle(x,y,x+8,y+17,obj_block_parent,false,false){
                if !collision_rectangle(x-7,y+9,x+7,y+24,obj_block_parent,false,false){
                    gravity = 0.7;
                    //sprite_index = spr_mario_1_jump;
                }
            }
            }
            gravity_direction = 270;
        } else {
            gravity = 0;
        }
    }
    
    //Max downward speed
    if global.skin != 3{
        if vspeed &gt; 2.5 {
            vspeed = 2.5;
        }
    } else {
        if vspeed &gt; 1.0 {
            vspeed = 1.0;
        }
    }
}
}
}

//Manipulation in the editor
if select = 1{
    x = ((mouse_x div 16)*16)+8;
    y = ((mouse_y div 16)*16);
} else {
    bcount = 0;
    btime = 0;
    shake = 0;
}

//Powering up
if instance_exists(obj_powerup){
    canMove = 0;
    if abl = 0{
        cusH = hspeed;
        cusY = vspeed;
        abl = 1;
    }
    hspeed = 0;
    vspeed = 0;
    image_speed = 0;
    gravity = 0;
}

if duck = 0{
    if item = 0 || item = 4{
        mask_index = spr_mario_1_collisions;
    } else {
        mask_index = spr_bigmario_1_collisions;
    }
} else {
    mask_index = spr_mario_1_collisions;
}

//Dying
if dead = 1{
    //canMove = 0;
    dead = 2;
    hspeed = 0;
    //vspeed = 0;
    alarm[1] = 65;
    //gravity = 0;
    item = 0;
    sprite_index = spr_mario_dead;
    _yspeed = 0;
    _xspeed = 0;
}

//Falling out of the level
if instance_exists(obj_play){
    if obj_play.inEditor = 0{
        if dead = 0{
            if y &gt;= room_height/2-56{
                deadga = 1;
                dead = 1;
                sprite_index = spr_mario_dead;
                deathY = 256;
            }
        }
    }
}

if deadba = 1{
//    deadba = 1;
    deadba = 2;
    sprite_index = spr_mario_dead;
    qwer = 1;
    //canMove = 0;
    dead = 1;
    //alarm[1] = 90;
}

if dead = 2{
    //y -= 5;
    if qwer = 0{
        alarm[1] = 65;
        qwer = 1;
        if global.skin != 0{
            vspeed = -5.6;
        } else {
            vspeed = -4.5
        }
    }
}

//Boundaries
if room = room_levelcreator {

if x &lt; 8{
    x = 8;
    sprite_index = spr_mario_1_still;
    hspeed = 0;
}

        //SMGS Movement
        
        // XSpeed
        if global.skin = 4{
            repeat (abs(_xspeed)) {
                x += sign(_xspeed);
            }
        } else {
            _xspeed = 0;
        }     
}
        
if dead = 0 &amp;&amp; deadba = 0{

if !(keyboard_check(vk_left)) &amp;&amp; !(keyboard_check(vk_right)){

    if (_xspeed &lt; 0)
            _xspeed += _friction;
    if (_xspeed &gt; 0)
            _xspeed -= _friction;
            
    if ( _xspeed &gt; -_friction &amp;&amp; _xspeed &lt; _friction )
        _xspeed = 0;
}
}

//Handling yspeed
if global.skin = 4{
    repeat (abs(_yspeed)) {
        y += sign(_yspeed);
    }
} else {
    _yspeed = 0;
}

//Limiting the death height
/*if dead &gt; 0{
    if y &lt; view_hview[1]/2+8{
        y = view_hview[1]/2+8;
        //vspeed = 0;
    }
}*/

if dead != 0{
    //gravity = 0;
    image_angle = 0;
    amiibo = 0;
}

if hit = 1{
    hit = 2;
    alarm[4] = 65;
}

if global.skin != 0{
    if hit = 1{
        if global.skin != 0{
            image_alpha = 0.5;
        }
    } else {
        image_alpha = 1;
    }
}

if hit = 2{
    //invinciblea = 0;
} else {
    //image_alpha = 1;
}
if item != 6{
    hit = 0;
}

if collision_point(x,y+17,obj_solidtop,false,false){
    jumpnow = 0;
}

if !collision_rectangle(x-8,y,x+8,y+16,obj_ladder,false,false){
    climbing = 0;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Abducted Galaxy physics
/*if global.skin = 3{
    //Left
    if keyboard_check(vk_left){
        //If on ice, xspeed is 0.5
        xspeed = -1;
    }
    
    //Right
    if keyboard_check(vk_right){
        xspeed = 1;
    }

    //Deceleration
    if xspeed &gt; 0
    and ((!keyboard_check(vk_right) and !keyboard_check(vk_left)))
    {
    xspeed -= 1
    if xspeed &gt; 0
    and xspeed &lt; 1
    xspeed = 0
    }
    if xspeed &lt; 0
    and ((!keyboard_check(vk_left) and !keyboard_check(vk_right)))
    {
    xspeed += 1
    if xspeed &lt; 0
    and xspeed &gt; -1
    xspeed = 0
    }
    
    //Image speed
    image_speed = xspeed/5;
    
    //Maximum speed
    maxspeed = 1.6;
    if xspeed &gt; maxspeed
    xspeed = maxspeed
    if xspeed &lt; -maxspeed
    xspeed = -maxspeed
    
    //Direction
    if xspeed &lt; 0
    xscale = -1
    if xspeed &gt; 0
    xscale = 1
    
    //Gravity
    if (collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_solidtop,0,1) &amp;&amp; vspeed &gt;= 0 &amp;&amp; y &lt;= (collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_solidtop,0,1)).y-32+vspeed)
    {
    gravity = 0
    vspeed = 0
    }
    else
    {
    gravity = 0.5 //0.25 in water or in micro gravity
    }
    
    //Terminal velocity
    if vspeed &gt; 10
    vspeed = 10
    
    //Jumping
    if keyboard_check_pressed(ord('X')){
        vspeed = -8.5;
    }
    
    //Movement
    hspeed = xspeed;
    
    var myspeed;
    myspeed = xspeed
    if myspeed &lt; 0
    myspeed = -myspeed
    repeat (myspeed)
    {
    if xspeed &gt; 0
    {

    if !collision_rectangle(bbox_right,bbox_top,bbox_right+1,bbox_bottom,obj_solid,0,1)
    and !(collision_rectangle(bbox_right,bbox_top,bbox_right+1,bbox_bottom,obj_solid,0,1)
    and bbox_right &lt;= collision_rectangle(bbox_right,bbox_top,bbox_right+1,bbox_bottom,obj_solid,0,1).bbox_left){
    //x += 1.6
    }else
    {
    var i;
    if collision_rectangle(bbox_right,bbox_top,bbox_right+1,bbox_bottom,obj_solid,0,1)
    {
    i = collision_rectangle(bbox_right,bbox_top,bbox_right+1,bbox_bottom,obj_solid,0,1)
    }
    if (collision_rectangle(bbox_right,bbox_top,bbox_right+1,bbox_bottom,obj_solid,0,1)
    and bbox_right &lt;= collision_rectangle(bbox_right,bbox_top,bbox_right+1,bbox_bottom,obj_solid,0,1).bbox_left)
    {
    i = collision_rectangle(bbox_right,bbox_top,bbox_right+1,bbox_bottom,obj_solid,0,1)
    }
    if x &gt; i.bbox_left-7
    x = i.bbox_left-7
    xspeed = 0
    //exit;
    }
    }
    if xspeed &lt; 0
    {
    if !collision_rectangle(bbox_left-1,bbox_top,bbox_left,bbox_bottom,obj_solid,0,1)
    and !(collision_rectangle(bbox_left-1,bbox_top,bbox_left,bbox_bottom,obj_solid,0,1)
    and bbox_left &gt;= collision_rectangle(bbox_left-1,bbox_top,bbox_left,bbox_bottom,obj_solid,0,1).bbox_right){
    //x -= 1.6
    }else
    {
    var i;
    if collision_rectangle(bbox_left-1,bbox_top,bbox_left,bbox_bottom,obj_solid,0,1)
    {
    i = collision_rectangle(bbox_left-1,bbox_top,bbox_left,bbox_bottom,obj_solid,0,1)
    }
    if (collision_rectangle(bbox_left-1,bbox_top,bbox_left,bbox_bottom,obj_solid,0,1)
    and bbox_left &gt;= collision_rectangle(bbox_left-1,bbox_top,bbox_left,bbox_bottom,obj_solid,0,1).bbox_right)
    {
    i = collision_rectangle(bbox_left-1,bbox_top,bbox_left,bbox_bottom,obj_solid,0,1)
    }
    if x &lt; i.bbox_right+7
    x = i.bbox_right+7
    xspeed = 0
    //exit;
    }
    }
    }
    
    
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Abducted Toad Physics PORT
if global.skin = 3{
//aura
if keyboard_check_pressed(ord('Z'))
{
if canattack = 1
and ducking = 0
and stunned = 0
{
instance_create(x,y+16,obj_aura)
canattack = 0
alarm[0] = 13
}
}

/*if keyboard_check(global.down_key)
and collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_solidtop,0,1)
and vspeed = 0
and stunned = 0
and ducking = 0
{
ducking = 1
}
if (!keyboard_check(global.down_key) or !collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_solidtop,0,1))
and ducking = 1
//and !collision_rectangle(bbox_left,bbox_top-1,bbox_right,bbox_top-1,obj_solid,0,1)
{
ducking = 0
}*/


;
if keyboard_check(vk_left)
{
comingOutOfMinecart = 0
if !collision_rectangle(bbox_left-1,bbox_top,bbox_left-1,bbox_bottom,obj_solid,0,1)
and !(collision_rectangle(bbox_left-1,bbox_top,bbox_left,bbox_bottom,obj_solid,0,1)
and bbox_left &gt;= collision_rectangle(bbox_left-1,bbox_top,bbox_left,bbox_bottom,obj_solid,0,1).bbox_right)
and ducking = 0
{
if collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_ice,0,1)
or (collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_ice_solidtop,0,1) and vspeed = 0)
xspeed -= 0.25
else
xspeed -= 0.5
}
}
if keyboard_check(vk_right)
{
comingOutOfMinecart = 0
if !collision_rectangle(bbox_right+1,bbox_top,bbox_right+1,bbox_bottom,obj_solid,0,1)
and !(collision_rectangle(bbox_right,bbox_top,bbox_right+1,bbox_bottom,obj_solid,0,1)
and bbox_right &lt;= collision_rectangle(bbox_right,bbox_top,bbox_right+1,bbox_bottom,obj_solid,0,1).bbox_left)
and ducking = 0
{
if collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_ice,0,1)
or (collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_ice_solidtop,0,1) and vspeed = 0)
xspeed += 0.25
else
xspeed += 0.5
}
}
//friction:
if comingOutOfMinecart = 0
{
if xspeed &gt; 0
and ((!keyboard_check(vk_right) and !keyboard_check(vk_left)) or ducking = 1)
{
if collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_ice,0,1)
or (collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_ice_solidtop,0,1) and vspeed = 0)
xspeed -= 0.155
else
{
xspeed -= 1
if xspeed &gt; 0
and xspeed &lt; 1
xspeed = 0
}
}
if xspeed &lt; 0
and ((!keyboard_check(vk_left) and !keyboard_check(vk_right)) or ducking = 1)
{
if collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_ice,0,1)
or (collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_ice_solidtop,0,1) and vspeed = 0)
xspeed += 0.155
else
{
xspeed += 1
if xspeed &lt; 0
and xspeed &gt; -1
xspeed = 0
}
}
}
;
;
if collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_water,0,1)
maxspeed = 2.5
else
{
if keyboard_check(ord('Z'))
maxspeed = 3
else
maxspeed = 2.5
}
;
if xspeed &gt; maxspeed
xspeed = maxspeed
if xspeed &lt; -maxspeed
xspeed = -maxspeed
;
if xspeed &lt; 0
xscale = -1
if xspeed &gt; 0
xscale = 1
;

if (collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_solidtop,0,1) and vspeed &gt;= 0 and y &lt;= (collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_solidtop,0,1)).y-32+vspeed) or stunned = 1
{
gravity = 0
vspeed = 0
}
else
{
if collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_water,0,1)
or instance_exists(obj_lowgravity)
gravity = 0.25
else
gravity = 0.5
}
if collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_water,0,1)
{
if vspeed &gt; 2
vspeed = 2
}
else
{
if vspeed &gt; 10
vspeed = 10
}
;

                                                                    if keyboard_check_released(ord('X'))
                                                                    and vspeed &lt; -2
                                                                    and canEndJump = 1
                                                                    {
                                                                    vspeed = -2
                                                                    }

if !collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_water,0,1)
{
if vspeed &gt; 0
{
if collision_point(x,bbox_bottom+vspeed+1,obj_water,0,1)
{
instance_create(x,collision_point(x,bbox_bottom+vspeed+1,obj_water,0,1).bbox_top,obj_splash)
}
}
if vspeed &lt; 0
{
if collision_point(x,bbox_bottom+(-vspeed)+1,obj_water,0,1)
{
instance_create(x,collision_point(x,bbox_bottom+(-vspeed)+1,obj_water,0,1).bbox_top,obj_splash)
}
}
}

if collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_frozenconveyerbelt,0,1)
and stunned = 0
{
var theother;
theother = collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_frozenconveyerbelt,0,1)
if theother.myspeed &gt; 0
{
if !collision_rectangle(bbox_right,bbox_top,bbox_right+theother.myspeed,bbox_bottom,obj_solid,0,1)
x += theother.myspeed
else if collision_rectangle(bbox_right,bbox_top,bbox_right+theother.myspeed,bbox_bottom,obj_hurtblock,0,1)
and vulnerable = 1
{
event_user(1)
}
}
if theother.myspeed &lt; 0
{
if !collision_rectangle(bbox_left,bbox_top,bbox_left+theother.myspeed,bbox_bottom,obj_solid,0,1)
x += theother.myspeed
else if collision_rectangle(bbox_left,bbox_top,bbox_left+theother.myspeed,bbox_bottom,obj_hurtblock,0,1)
and vulnerable = 1
{
event_user(1)
}
}
}

if vspeed &gt;= 0
canEndJump = 1


if stunned = 1
{
xspeed = 0
}
if keyboard_check_pressed(ord('X'))
and stunned = 0
{
if collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_water,0,1)
{
if keyboard_check(global.up_key)
vspeed = -8
else if keyboard_check(global.down_key)
vspeed = -3
else
vspeed = -5
sound_play(snd_swim)
}
else
{
if collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_solidtop,0,1)
and y &lt;= collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_solidtop,0,1).y-32
{
sound_play(snd_jump)
if global.dovoices = true
{
if floor(random(1.5)) = 0
sound_play(choose(snd_toad_jump,snd_toad_jump,snd_toad_jump2,snd_toad_jump2,snd_toad_jump3))
}
if ducking = 1
{
vspeed = -10
bigjump = 1
//sprite_index = spr_toad_roll
image_index = 2
}
else
vspeed = -8.5
}
}
}
if vspeed &gt;= 0
bigjump = 0
if (collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_solidtop,0,1) and vspeed &gt; 0)
and (y &lt;= (collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_solidtop,0,1)).y-32+vspeed)
{
comingOutOfMinecart = 0
if y &gt; (collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_solidtop,0,1)).y-32
y = (collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_solidtop,0,1)).y-32
instance_create(x,bbox_bottom,obj_landdust)
sound_play(snd_land)
}
if collision_rectangle(bbox_left,bbox_top-1,bbox_right,bbox_top,obj_solid,0,1)
{
if vspeed &lt; 0
and y &gt;= (collision_rectangle(bbox_left,bbox_top-1,bbox_right,bbox_top,obj_solid,0,1)).bbox_bottom-4+vspeed
{
sound_play(snd_hitceiling)
y = (collision_rectangle(bbox_left,bbox_top-1,bbox_right,bbox_top,obj_solid,0,1)).bbox_bottom-4
vspeed = 0
}
}
if collision_rectangle(bbox_left,bbox_top-1,bbox_right,bbox_top,obj_solid,0,1)
{
if vspeed &lt; 0
and y &gt;= (collision_rectangle(bbox_left,bbox_top-1,bbox_right,bbox_top,obj_solidb,0,1)).bbox_bottom-4+vspeed
{
sound_play(snd_hitceiling)
y = (collision_rectangle(bbox_left,bbox_top-1,bbox_right,bbox_top,obj_solidbottom,0,1)).bbox_bottom-4
vspeed = 0
}
}

;
var myspeed;
myspeed = xspeed
if myspeed &lt; 0
myspeed = -myspeed
repeat (myspeed)
{
if xspeed &gt; 0
{
if !collision_rectangle(bbox_right,bbox_top,bbox_right+1,bbox_bottom,obj_solid,0,1)
and !(collision_rectangle(bbox_right,bbox_top,bbox_right+1,bbox_bottom,obj_solid,0,1)
and bbox_right &lt;= collision_rectangle(bbox_right,bbox_top,bbox_right+1,bbox_bottom,obj_solid,0,1).bbox_left)
x += 1
else
{
var i;
if collision_rectangle(bbox_right,bbox_top,bbox_right+1,bbox_bottom,obj_solid,0,1)
{
i = collision_rectangle(bbox_right,bbox_top,bbox_right+1,bbox_bottom,obj_solid,0,1)
}
if (collision_rectangle(bbox_right,bbox_top,bbox_right+1,bbox_bottom,obj_solid,0,1)
and bbox_right &lt;= collision_rectangle(bbox_right,bbox_top,bbox_right+1,bbox_bottom,obj_solid,0,1).bbox_left)
{
i = collision_rectangle(bbox_right,bbox_top,bbox_right+1,bbox_bottom,obj_solid,0,1)
}
if x &gt; i.bbox_left-7
x = i.bbox_left-7
xspeed = 0
//exit;
}
}
if xspeed &lt; 0
{
if !collision_rectangle(bbox_left-1,bbox_top,bbox_left,bbox_bottom,obj_solid,0,1)
and !(collision_rectangle(bbox_left-1,bbox_top,bbox_left,bbox_bottom,obj_solid,0,1)
and bbox_left &gt;= collision_rectangle(bbox_left-1,bbox_top,bbox_left,bbox_bottom,obj_solid,0,1).bbox_right)
x -= 1
else
{
var i;
if collision_rectangle(bbox_left-1,bbox_top,bbox_left,bbox_bottom,obj_solid,0,1)
{
i = collision_rectangle(bbox_left-1,bbox_top,bbox_left,bbox_bottom,obj_solid,0,1)
}
if (collision_rectangle(bbox_left-1,bbox_top,bbox_left,bbox_bottom,obj_solid,0,1)
and bbox_left &gt;= collision_rectangle(bbox_left-1,bbox_top,bbox_left,bbox_bottom,obj_solid,0,1).bbox_right)
{
i = collision_rectangle(bbox_left-1,bbox_top,bbox_left,bbox_bottom,obj_solid,0,1)
}
if x &lt; i.bbox_right+7
x = i.bbox_right+7
xspeed = 0
//exit;
}
}
}
if collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_solidtop,0,1)
and vspeed = 0
and y &lt;= (collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_solidtop,0,1)).y-32
{
/*if instance_exists(obj_aura)
sprite_index = spr_toad_aura
else*/
sprite_index = spr_mario_1_walk
if xspeed != 0
image_speed = xspeed/5
else
{
image_speed = 0
image_index = 0
}
if (keyboard_check(vk_left) and xspeed &gt; 0) or (keyboard_check(vk_right) and xspeed &lt; 0) and !(keyboard_check(vk_left) and keyboard_check(vk_right))
{
//sound_play(snd_skid)
if instance_exists(obj_aura){
//sprite_index = spr_toad_aura_skid
} else
sprite_index = spr_mario_1_skid
if !instance_exists(obj_skiddust)
{
var dust;
dust = instance_create(x,bbox_bottom,obj_skiddust)
dust.image_xscale = -xscale
}
}
}
else
{
image_speed = 0
if instance_exists(obj_aura){
//sprite_index = spr_toad_aura_jump
} else
{
if collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_water,0,1)
{
//sprite_index = spr_toad_swim
if vspeed &lt; 0
image_index = 0
else
image_index = 1
}
else
{
if bigjump = 1
{
//sprite_index = spr_toad_roll
image_speed = 1
}
else
{
sprite_index = spr_mario_1_jump
image_index = vspeed/3
if image_index &lt; 0
image_index = 0
if image_index &gt; 2
image_index = 2
}
}
}
}

if vulnerable = 1
image_alpha = 1
else
image_alpha = 0.5

if vspeed != 0
ducking = 0

/*if ducking = 1
{
sprite_index = spr_toad_duck
mask_index = spr_duck_mask
}*/
/*else
{
mask_index = spr_toad_mask
}*/

if stunned = 1
{
ducking = 0
//sprite_index = spr_toad_hurt
xspeed = 0
vspeed = 0
}


if x &lt; view_xview[0]+8
{
x = view_xview[0]+8
if xspeed &lt; 0
xspeed = 0
/*if global.autoscroll = 1
and global.autoscrollspeed &gt; 0
and (collision_rectangle(bbox_right,bbox_top,bbox_right,bbox_bottom,obj_solid,0,1) or (collision_rectangle(bbox_right,bbox_top,bbox_right,bbox_bottom,obj_solid,0,1) and bbox_right &lt;= collision_rectangle(bbox_right,bbox_top,bbox_right,bbox_bottom,obj_solidleft,0,1).bbox_left+global.autoscrollspeed))
{
//bass_stop_all()
sound_stop_all()
//global.autoscrollspeed = 0
//sound_play(snd_hurt)
//instance_create(x,y,obj_toad_die)
instance_destroy()
}*/
}
if x &gt; view_xview[0]+view_wview[0]-8
{
x = view_xview[0]+view_wview[0]-8
if xspeed &gt; 0
xspeed = 0
/*if global.autoscroll = 1
and global.autoscrollspeed &lt; 0
and collision_rectangle(bbox_left,bbox_top,bbox_left,bbox_bottom,obj_solid,0,1)
{
//bass_stop_all()
sound_stop_all()
global.autoscrollspeed = 0
sound_play(snd_hurt)
instance_create(x,y,obj_toad_die)
instance_destroy()
}*/
}


if y &lt; -48
y = -48

/*if y &gt; room_height
{
if instance_exists(obj_musicplayer)
sinBassStreamStop(obj_musicplayer.music)
instance_create(x,y,obj_toad_die)
instance_destroy()
}*/

/*if global.hardmode = 1
and health &gt; 1
health = 1*/

if instance_exists(obj_aura)
{
obj_aura.x = x
obj_aura.y = y+16
}


}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hello Engine 3 Movement
if global.skin = 1{
//                                    mask_index = spr_mario_1_collisions;
    if obj_play.inEditor = 0{
        if dead = 0{
        if y &lt; -48
        y = -48
        //image_xscale = 1
        
        if state &lt; 3{
            if collision_rectangle(x-8,y+32,x+8,y+32,obj_solidtop,1,1)
            or collision_rectangle(x-8,y+32,x+8,y+33,obj_slopeparent,1,1)
            {
            if hspeed = 0
            state = 0
            else
            state = 1
            if vspeed &lt; 0
            state = 2
            }
            else
            state = 2
            if vspeed &gt; 3
            vspeed = 3
            if keyboard_check(ord('Z'))
            {
            varrun = 1
            hspeedmax = 3
            }
            else
            {
            varrun = 0
            hspeedmax = 1.5
            }
            if keyboard_check_pressed(ord('X'))
            and jumpnow = 0
            and not vspeed &gt; 0
            and not instance_exists(obj_puller)
            and not instance_exists(obj_statue)
            and isduck = 0
            and isjump = 0
            {
            vspeed = -1.5
            sound_play(snd_jump_smw)
            jumpnow = 1
            }
            if keyboard_check(ord('X')) and jumpnow = 1
            {
            vspeed += -0.5
            if vspeed &lt; -4.6
            jumpnow = 2
            }
            if keyboard_check_released(ord('X')) and jumpnow = 1
            jumpnow = 2
            if keyboard_check(vk_right) and not instance_exists(obj_puller) and isduck = 0 and not keyboard_check(vk_left)
            {
            hspeed += 0.11
            if isjump = 0
            direct = 1
            }
            if keyboard_check(vk_left) and not instance_exists(obj_puller) and isduck = 0 and not keyboard_check(vk_right)
            {
            hspeed += -0.11
            if isjump = 0
            direct = -1
            }
            else
            {
            if hspeed &gt; 0
            hspeed-=0.05
            if hspeed &lt; 0
            hspeed+=0.05
            if hspeed &lt; 0.05
            if hspeed &gt; -0.05
            hspeed = 0
            }
            if hspeed &gt; hspeedmax
            hspeed = hspeedmax
            if hspeed &lt; hspeedmax*-1
            hspeed = hspeedmax*-1
            if collision_rectangle(x-8,y+16,x+8,y+18,obj_solidtop,1,1) and not vspeed &lt; 0
            {
            gravity = 0
            //vspeed = 0
            }
            else if state = 2
            //gravity = 0.25
            if hspeed &gt; 0
                if collision_rectangle(x+hspeed+8,y-sizze+2-32,x+hspeed+8,y+29-32,obj_solid,1,1){
                //hspeed = 0
                }
                if hspeed &lt; 0
                if collision_rectangle(x+hspeed-8,y-sizze+2-32,x+hspeed-8,y+29-32,obj_solid,1,1){
                //hspeed = 0
                }
                if vspeed &lt; 0
                if item = 0 || item = 4{
                    if collision_rectangle(x-7,y-sizze+16,x+7,y-sizze+16,obj_solid,1,1)
                    {
                    //sound_play(snd_bump)
                    vspeed = 1
                    jumpnow = 2
                    }
                } else {
                    if collision_rectangle(x-7,y-sizze+8,x+7,y-sizze+8,obj_solid,1,1)
                    {
                    //sound_play(snd_bump)
                    vspeed = 1
                    jumpnow = 2
                    }
                }
            while collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_slopeparent,1,1)
            y-=1
            if hspeed &gt; 2.8
            or hspeed &lt; -2.8
            isrun = 1
            else
            isrun = 0
            if collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_swim,1,1)
            isswim = 1
            hspeed = hspeed*100
            hspeed = round(hspeed)
            hspeed = hspeed/100
            x = x*100
            x = round(x)
            x = x/100
        } if state = 3 {
            if isduck = 1
            isduck = 0
            if keyboard_check(vk_left)
            hspeed -=0.5
            else
            if keyboard_check(vk_right)
            hspeed +=0.5
            else
            hspeed = 0
            if keyboard_check(vk_up)
            vspeed -=0.5
            else
            if keyboard_check(vk_down)
            vspeed +=0.5
            else
            vspeed = 0
            if vspeed &gt; 1.5
            vspeed = 1.5
            if hspeed &gt; 1
            hspeed = 1
            //if vspeed &lt; -1.5
            //vspeed = -1.5
            if hspeed &lt; -1
            hspeed = -1
            if keyboard_check_pressed(ord('X'))
            {
            vspeed = -5 //-1.5
            sound_play(snd_jump_smw)
            jumpnow = 1
            state = 2
            }
//            if not collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_climb,1,1)
//            state = 0
            if keyboard_check(vk_right) and not instance_exists(obj_puller)
            direct = 1
            if keyboard_check(vk_left) and not instance_exists(obj_puller)
            direct = -1
            if vspeed &lt; 0
            if collision_rectangle(x-8,y+sizze,x+7,y+sizze,obj_solid,1,1)
            {
            //sound_play(snd_bump)
            vspeed = 1
            jumpnow = 2
            }/*
            if hspeed &gt; 0
            if collision_rectangle(x+hspeed+8,y+sizze+2,x+hspeed+8,y+31,obj_solid,1,1)
            hspeed = 0
            if hspeed &lt; 0
            if collision_rectangle(x+hspeed-8,y+sizze+2,x+hspeed-8,y+31,obj_solid,1,1)
            hspeed = 0*/
        }
        
        }
        //Falling down
        if !collision_rectangle(x-7,y+18,x+7,y+18,obj_solidtop,false,false) &amp;&amp; !collision_rectangle(x-7,y+18,x+7,y+18,obj_block_parent,false,false){
            gravity = 0.2; //0.25 / 0.45
            if vspeed &gt; 0{
//                jumpnow = 2;
            }
        } else {
            /*gravity = 0;
            jumpnow = 0;
            vspeed = 0;*/
        }
        
        if keyboard_check_pressed(ord('X')){
            if jumpnow = 0{
                //vspeed = -1.5;
                //jumpnow = 1;
            }
        }
        
        //Handling sprites in Hello Engine
        if dead = 0{
        if (hspeed &gt; 0 &amp;&amp; keyboard_check(vk_left)) || (hspeed &lt; 0 &amp;&amp; keyboard_check(vk_right)){
            if jumpnow = 0{
                sprite_index = spr_mario_1_skid;
            }
        } else {
            if hspeed &gt; 0{
                if vspeed = 0{
                    sprite_index = spr_mario_1_walk;
                }
                image_xscale = 1;
            }
            
            if hspeed &lt; 0{
                if vspeed = 0{
                    if !collision_point(x-9,y,obj_solid,false,false){
                        sprite_index = spr_mario_1_walk;
                    }
                    image_xscale = -1;
                }
            }
            
            if hspeed = 0{
                sprite_index = spr_mario_1_still;
            }
        }
        
        
        image_speed = 0.15;
        
        if !collision_rectangle(x-8,y+18,x+8,y+18,obj_solidtop,false,false){
            if !collision_rectangle(x-8,y+18,x+8,y+18,obj_block_parent,false,false){
                sprite_index = spr_mario_1_jump;
            }
        }
        
        }
    }
}

if vspeed &gt; 0{
    jumpnow = 2;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Old Collisions

/*
//If Mario is bumping into a wall to the right
if hspeed &gt; 0
and collision_rectangle(bbox_right,bbox_top,bbox_right,bbox_bottom,obj_solid,0,0)
{

    //Stop Mario's horizontal speed
    hspeed = 0;
    if jumpnow = 0{
        sprite_index = spr_mario_1_still;
    }

    //Prevent Mario from getting embed into the wall
    while collision_rectangle(bbox_right,bbox_top,bbox_right,bbox_bottom-1,obj_solid,0,0)
    and not collision_point(x,bbox_top,obj_solid,0,0)
    and keyboard_check(vk_right)
        x--

}

//If Mario is bumping into a wall to the left
else if hspeed &lt; 0
and collision_rectangle(bbox_left,bbox_top,bbox_left,bbox_bottom,obj_solid,0,0)
{

    //Stop Mario's horizontal speed
    hspeed = 0;
    if jumpnow = 0{
        sprite_index = spr_mario_1_still;
    }

    //Prevent Mario from getting embed into the wall
    while collision_rectangle(bbox_left,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,0,0)
    and not collision_point(x,bbox_top+4,obj_solid,0,0)
    and keyboard_check(vk_left)
        x++
}

//If Mario's head is bumping the ceiling
if vspeed &lt;= 0
and collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_solid,0,0)
{

    //Prevent Mario's head from getting embed in the ceiling
    while collision_rectangle(bbox_left,bbox_top-1,bbox_right,bbox_top,obj_solid,0,0){
        y++
        vspeed = 0;
    }
    
    //Hitting blocks
    if collision_rectangle(x,y-4,x+32,y,obj_block_parent,false,false){
        inst = instance_nearest(x,y,obj_block_parent);
        inst.hit = 1;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Aura
if instance_exists(obj_play){
    if obj_play.inEditor = 0{
        if aura = 0{
            if item = 4 || item = 5{
                if keyboard_check_pressed(ord('Z')){
                aura = 1;
                instance_create(x,y,obj_mario_aura);
                audio_play_sound(snd_aura,1,false);
                alarm[3] = 26;
                }
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Amiibo Movement


//Inkling Squid Movement
if amiibo = 6{
if instance_exists(obj_play){
if obj_play.inEditor = 0{


sprite_index = spr_inkamiibo_still;

if inkJump = 0{
    if keyboard_check(ord('X')){
        inkGo = 1;
        inkJump = 1;
    }
} else {
    if keyboard_check(ord('X')){
        charge += 0.5;
        sprite_index = spr_inkamiibo_jump;
        image_index += 0.05;
    }
}

if gravity = 0{
    if keyboard_check_released(ord('X')){
        inkGo = 0;
        //y -= 4;
        vspeed = -charge;
        //inkJump = 0;
        charge = 0;
        sprite_index = spr_inkamiibo_still;
    }
}


if keyboard_check_released(ord('X')){
    charge = 0;
}

if charge &gt; 5{
    charge = 5;
    image_index = 2;
}

if !collision_rectangle(x,y,x+8,y+17,obj_solidtop,false,false) &amp;&amp; !collision_rectangle(x,y,x+8,y+17,obj_block_parent,false,false){
    gravity = 0.16;
    //inkJump = 1;
    //Moving left and right
    if keyboard_check(vk_left){
        hspeed -= 0.04;
    }
    if keyboard_check(vk_right){
        hspeed += 0.04;
    }
} else {
    hspeed = 0;
}

} else {
    sprite_index = spr_inkamiibo_still;
}

}
}

//Falling sprites
if amiibo = 2{
    if vspeed &gt; 0{
        sprite_index = spr_peachamiibo_fall;
    }
}
if amiibo = 7{
    if vspeed &gt; 0{
        sprite_index = spr_bowseramiibo_fall;
    }
}
if amiibo = 15{
    if vspeed &gt; 0{
        sprite_index = spr_wiiamiibo_fall;
    }
}
if amiibo = 16{
    if vspeed &gt; 0{
        sprite_index = spr_dogamiibo_fall;
    }
}
if amiibo = 17{
    if vspeed &gt; 0{
        sprite_index = spr_kirbyamiibo_fall;
    }
}
if amiibo = 22{
    if vspeed &gt; 0{
        sprite_index = spr_jramiibo_fall;
    }
}
if amiibo = 23{
    if vspeed &gt; 0{
        sprite_index = spr_rosamiibo_fall;
    }
}
if amiibo = 24{
    if vspeed &gt; 0{
        sprite_index = spr_nessamiibo_fall;
    }
}
if amiibo = 25{
    if vspeed &gt; 0{
        sprite_index = spr_lucasamiibo_fall;
    }
}
if amiibo = 26{
    if vspeed &gt; 0{
        sprite_index = spr_macamiibo_fall;
    }
}
if amiibo = 27{
    if vspeed &gt; 0{
        sprite_index = spr_zssamiibo_fall;
    }
}
if amiibo = 29{
    if vspeed &gt; 0{
        sprite_index = spr_pitamiibo_fall;
    }
}
if amiibo = 30{
    if vspeed &gt; 0{
        sprite_index = spr_dpitamiibo_fall;
    }
}
if amiibo = 35{
    if vspeed &gt; 0{
        sprite_index = spr_grenamiibo_fall;
    }
}
if amiibo = 39{
    if vspeed &gt; 0{
        sprite_index = spr_robamiibo_fall;
    }
}
if amiibo = 40{
    if vspeed &gt; 0{
        sprite_index = spr_dddamiibo_fall;
    }
}
if amiibo = 47{
    if vspeed &gt; 0{
        sprite_index = spr_goom_fall;
    }
}
if amiibo = 53{
    if vspeed &gt; 0{
        sprite_index = spr_mlink_fall;
    }
}
if amiibo = 63{
    if vspeed &gt; 0{
        sprite_index = spr_oli_fall;
    }
}
if amiibo = 64{
    if vspeed &gt; 0{
        sprite_index = spr_marth_fall;
    }
}
if amiibo = 89{
    if vspeed &gt; 0{
        sprite_index = spr_trio_fall;
    }
}

//Posing
if amiibo &gt; 0{
    if hspeed = 0{
        if vspeed = 0{
            if keyboard_check(vk_up){
                sprite_index = spr_mario_1_pose;
                if amiibo = 46{
                    if !instance_exists(obj_psychoiris){
                        instance_create(x,y,obj_psychoiris);
                    }
                }
                if amiibo = 34 || amiibo = 37{
                    if !instance_exists(obj_aura){
                        instance_create(x,y,obj_aura);
                    }
                }
            }
        }
    }
}

//Transforming
if keyboard_check(vk_up){
    if hspeed = 0 &amp;&amp; vspeed = 0{
        if ztrans = 0{
            ztrans = 1;
            instance_create(x,y,obj_ztrans);
        }
    }
} else {
    ztrans = 0;
}


//Sonic Jumping
if jumpnow = 1{
    image_speed = 0.5;
}

//Checking the skin theme
if global.skin != 0{
    amiibo = 0;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collisions
if mounted = 0{
if dead = 0{

if climbing = 0{
if image_xscale = 1 || (image_xscale = -1 &amp;&amp; hspeed &gt; 0){
    if item = 0 || item = 4{
        if collision_point(x+8,y+8,obj_solid,false,false){
            //x --;
            x = collision_point(x+8,y+8,obj_solid,false,false).x-8;
            hspeed = 0;
            
            if jumpnow = 0{
                sprite_index = spr_mario_1_still;
            } else {
                sprite_index = spr_mario_1_jump;
            }
        }
    } else {
        if collision_rectangle(x+9,y-15,x+10,y+15,obj_solid,false,false){
            //x --;
            x = collision_rectangle(x+9,y-15,x+10,y+15,obj_solid,false,false).x-8;
            hspeed = 0;
            
            if jumpnow = 0{
                sprite_index = spr_mario_1_still;
            } else {
                sprite_index = spr_mario_1_jump;
            }
        }
    }
}

if image_xscale = -1 || (image_xscale = 1 &amp;&amp; hspeed &lt; 0){
    if item = 0 || item = 4{
        if collision_point(x-8,y+8,obj_solid,false,false){
            //x ++;
            x = collision_point(x-8,y+8,obj_solid,false,false).x+24;
            hspeed = 0;
            
            if jumpnow = 0{
                sprite_index = spr_mario_1_still;
            } else {
                sprite_index = spr_mario_1_jump;
            }
        }
    } else {
        if collision_rectangle(x-9,y-15,x-10,y+15,obj_solid,false,false){
            //x ++;
            //x = collision_point(x-8,y-8,obj_solid,false,false).x+16;
            hspeed = 0;
            
            if jumpnow = 0{
                sprite_index = spr_mario_1_still;
            } else {
                sprite_index = spr_mario_1_jump;
            }
        }
    }
}
}

//Top Collisions
if instance_exists(obj_play){
    if obj_play.inEditor = 0{
        if vspeed &lt;= 0
        and collision_rectangle(bbox_left+8,bbox_top-1,bbox_right-8,bbox_top-4,obj_solid,1,0)
        {
        
            //Prevent Mario's head from getting embed in the ceiling
            while collision_rectangle(bbox_left+1,bbox_top-1,bbox_right-1,bbox_top+1,obj_solid,1,0){
                y++
                vspeed = 1;
                jumphit = 1;
            }
            
        }
    }
}

}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
///Freezing in the editor
if instance_exists(obj_play){
    if obj_play.inEditor = 1{
        vspeed = 0;
        gravity = 0;
        hspeed = 0;
        _xspeed = 0;
        visible = true;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shaking
/*if btime = 0{
    alarm[10] = 8;
    btime = 1;
}

if bcount = 6{
    shake = 1;
}

if shake = 1{
    item = 1;
    shake = 0;
    bcount = 0;
    btime = 0;
}

if azk = 0{
    azk = 1;
    alarm[11] = 8;
    bx = x;
    by = y;
}
*/

    //Shaking is disabled indefinitely

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Editor Movement
if instance_exists(obj_play){
    if obj_play.inEditor = 1{
        onionAlarm = 2;
        climbing = 0;
        mounted = 0;
        image_speed = 0;
        image_xscale = 1;
        sprite_index = spr_mario_1_still;
        
        if !keyboard_check(vk_shift){
            if keyboard_check(vk_right){
                x += 3;
                if x &gt; 240{
                    //obj_gui_tile.ax += 3;
                }
            }
            if keyboard_check(vk_left){
                x -= 3;
                if x &gt; 240{
                    //obj_gui_tile.ax -= 3;
                }
            }
            if keyboard_check(vk_up){
                y -= 3;
            }
            if keyboard_check(vk_down){
                y += 3;
            }
        } else {
            if keyboard_check(vk_right){
                x += 30;
            }
            if keyboard_check(vk_left){
                x -= 30;
            }
            if keyboard_check(vk_up){
                y -= 30;
            }
            if keyboard_check(vk_down){
                y += 30;
            }
        }
        if mouse_x &gt; self.x-64 &amp;&amp; mouse_x &lt; self.x+64 &amp;&amp; mouse_y &gt; self.y-64 &amp;&amp; mouse_y &lt; self.y+64 &amp;&amp; keyboard_check(vk_shift) &amp;&amp; mouse_check_button(mb_right){
            if (global.skin = 0 &amp;&amp; item != 0 &amp;&amp; item != 4) || global.skin != 0 || amiibo != 0{
                sprite_index = spr_bigmario_1_duck;
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_tb_tele">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vspeed = 0;
spinjump = 0;
y = other.y-24;
jumpnow = 0;
_yspeed = 0;
gravity = 0;

if hspeed &gt; 0 || _xspeed &gt; 0{
    if vspeed = 0{
        if hspeed &gt; 0 || _xspeed &gt; 0{
            sprite_index = spr_mario_1_walk;
        } else {
            sprite_index = spr_mario_1_skid;
        }
    }
}

if hspeed &lt; 0 || _xspeed &lt; 0{
    if vspeed = 0{
        if hspeed &lt; 0 || _xspeed &lt; 0{
            sprite_index = spr_mario_1_walk;
        } else {
            sprite_index = spr_mario_1_skid;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_ladder">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if obj_play.inEditor = 0{
    if dead = 0{
        if mounted = 0{
            if keyboard_check(vk_up){
                climbing = 1;
                if collision_point(x,y,obj_ladder,false,false){
                    vspeed = -1.5;
                } else {
                    vspeed = 0;
                }
            }
            if keyboard_check(vk_down){
                climbing = 1;
                if collision_point(x,y+16,obj_ladder,false,false){
                    vspeed = 1.5;
                } else {
                    vspeed = 0;
                }
            }
            if keyboard_check_released(vk_up) || keyboard_check_released(vk_down){
                vspeed = 0;
            }
            
            if climbing = 1{
                gravity = 0;
                hspeed = 0;
                sprite_index = spr_mario_1_flag;
                x = other.x;
                jumpnow = 0;
                if keyboard_check_pressed(ord('X')){
                    climbing = 0;
                    if keyboard_check(vk_left){
                        hspeed = -2;
                    } else if keyboard_check(vk_right){
                        hspeed = 2;
                    }
                }
                if keyboard_check_pressed(vk_left){
                    image_xscale = 1;
                }
                if keyboard_check_pressed(vk_right){
                    image_xscale = -1;
                }
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_flagpole">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Remove shadow
with obj_shadow{
    instance_destroy();
}

obj_tileparent.shadow = 0;
obj_solidplace.shadow = 0;

if obj_play.inEditor = 0{
    if amiibo &gt; 0{
        with instance_create(other.x,other.y,obj_amiibo_die){
            amiibo = obj_player.amiibo;
        }
        amiibo = 0;
    }
    
    instance_create(x,y,obj_player_flag);
    obj_player_flag.item = self.item;
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_armorflower">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with other{
    instance_destroy();
}

if item != 6{
    instance_create(x,y,obj_powerup);
    obj_powerup.item = 6;
}

amiibo = 0;
image_angle = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_cappy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with other{
    instance_destroy();
}

if item = 0{
    instance_create(x,y,obj_powerup);
    obj_powerup.item = 4;
}
if item &gt; 0 &amp;&amp; item != 5{
    instance_create(x,y,obj_powerup);
    obj_powerup.item = 5;
}

amiibo = 0;
image_angle = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_lasflower_tile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with other{
    instance_destroy();
}

if item != 3{
    instance_create(x,y,obj_powerup);
    obj_powerup.item = 3;
}

amiibo = 0;
image_angle = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_fireflower_tile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with other{
    instance_destroy();
}

if item != 2{
    instance_create(x,y,obj_powerup);
    obj_powerup.item = 2;
}

amiibo = 0;
image_angle = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_cointile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if other.collect = 0{
    if obj_play.inEditor = 0{
        if global.skin = 0{
            audio_play_sound(snd_coin_smb1,1,false);
        } else {
            audio_play_sound(snd_coin_smw,1,false);
        }
        other.collect = 1;
        other.visible = false;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_solidplace">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if asdf = 0{
    asdf = 1;
    if time = 1{
        y = other.y-16;
        time = 0;
        asdf = 0;
    } else {
        alarm[0] = 8;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_block_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Solidtop stuff
if obj_play.inEditor = 0{
    if (other.object_index = obj_bricktile &amp;&amp; other.hit &lt; 2) || other.object_index != obj_bricktile{
        if y &lt; other.y-1{
            if dead = 0{
                inkJump = 0;
                
                
                if y &lt; other.y-7{
                    if x &gt; other.x-12 &amp;&amp; x &lt; other.x+12{
                        if vspeed &gt;= 0{
                            if amiibo != 6{
                                if y &lt; other.y{
                                    vspeed = 0;
                                    spinjump = 0;
                                    y = other.y-24;
                                    image_angle = 0;
                                    
                                    //Inkling Squid
                                    if amiibo = 6{
                                        hspeed = 0;
                                    }
                                    
                                    jumpnow = 0;
                                    _yspeed = 0;
                                    mountJump = 0;
                                    gravity = 0;
                                    
                                    if hspeed &gt; 0 || _xspeed &gt; 0{
                                        if vspeed = 0{
                                            if hspeed &gt; 0 || _xspeed &gt; 0{
                                                sprite_index = spr_mario_1_walk;
                                            } else {
                                                sprite_index = spr_mario_1_skid;
                                            }
                                        }
                                    }
                                
                                    if hspeed &lt; 0 || _xspeed &lt; 0{
                                        if vspeed = 0{
                                            if hspeed &lt; 0 || _xspeed &lt; 0{
                                                sprite_index = spr_mario_1_walk;
                                            } else {
                                                sprite_index = spr_mario_1_skid;
                                            }
                                        }
                                    }
                                }
                            } else {
                                gravity = 0;
                                vspeed = 0;
                                y = other.y - 24;
                            }
                        }
                    }
                }
                
            }
        } else {
            if dead = 0{
                if x &gt; other.x-12 &amp;&amp; x &lt; other.x+12{
                    if vspeed &lt; 0{
                        if item = 0{
                            y = other.y+8;
                        } else {
                            y = other.y+24;
                        }
                        
                        if other.hit = 0 &amp;&amp; other.breaking = 0{
                            if item = 0 || item = 4{
                                other.breaking = 0;
                            } else {
                                other.breaking = 1;
                                other.breakFix = 1;
                            }
                            if amiibo &gt; 0{
                                other.breaking = 1;
                                other.breakFix = 1;
                            }
                            other.hit = 1;
                        }
                        vspeed = 0;
                        jumpnow = 2;
                        state = 2;
                    }
                }
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Side collisions
if obj_play.inEditor = 0{
    if (other.object_index = obj_bricktile &amp;&amp; other.hit &lt; 2) || other.object_index != obj_bricktile{
        if y &gt; other.y-9 &amp;&amp; y &lt; other.y+3{
            if image_xscale = 1 || (image_xscale = -1 &amp;&amp; sprite_index = spr_mario_1_skid) || (image_xscale = -1 &amp;&amp; sprite_index = spr_mario_1_jump &amp;&amp; hspeed &gt;= 0){
                //if collision_rectangle(x-16,y,x+4,y+7,obj_block_parent,false,false){
                    if x &lt; other.x-9{
                    //if other.collPlay = 1{
                        x = other.x-16;
                        //x -= hspeed;
                        hspeed = 0;
                        sprite_index = spr_mario_1_still;
                    }
                //}
            }
            
            if image_xscale = -1 || (image_xscale = 1 &amp;&amp; sprite_index = spr_mario_1_skid) || (image_xscale = 1 &amp;&amp; sprite_index = spr_mario_1_jump &amp;&amp; hspeed &lt;= 0){
                //if collision_rectangle(x-4,y,x+16,y+7,obj_block_parent,false,false){
                if x &gt; other.x+9{
                    x = other.x+16;
                    hspeed = 0;
                    sprite_index = spr_mario_1_still;
                }
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_solidtop">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.skin != 1{
    if y &lt; other.y+1{
        if dead = 0{
            inkJump = 0;
            
            
            if y &lt; other.y-7{
                if amiibo != 6{
                    if y &lt; other.y{
                        vspeed = 0;
                        spinjump = 0;
                        y = other.y-16;
                        image_angle = 0;
                        if amiibo = 6{
                            hspeed = 0;
                        }
                        jumpnow = 0;
                        _yspeed = 0;
                        mountJump = 0;
                        gravity = 0;
                        if instance_exists(obj_jr_copter){
                            with obj_jr_copter{
                                instance_destroy();
                            }
                        }
                        
                        if duck = 0{
                            if hspeed &gt; 0 || _xspeed &gt; 0{
                                if vspeed = 0{
                                    if hspeed &gt; 0 || _xspeed &gt; 0{
                                        sprite_index = spr_mario_1_walk;
                                    } else {
                                        sprite_index = spr_mario_1_skid;
                                    }
                                }
                            }
                        }
                        
                        if hspeed &lt; 0 || _xspeed &lt; 0{
                            if duck = 0{
                            if vspeed = 0{
                                if hspeed &lt; 0 || _xspeed &lt; 0{
                                    if !collision_point(x-10,y,obj_solid,false,false){
                                        sprite_index = spr_mario_1_walk;
                                    } else {
                                        sprite_index = spr_mario_1_still;
                                    }
                                } else {
                                    sprite_index = spr_mario_1_skid;
                                }
                            }
                            }
                        }
                    }
                } else {
                    gravity = 0;
                    vspeed = 0;
                    y = other.y - 16;
                }
            }
            
        }
    } else {
        if x &gt; other.x-20 &amp;&amp; x &lt; other.x+20{
            if vspeed &lt; 0{
                jumpnow = 1;
                if item = 0 || item = 5{
                    y = other.y+18;
                } else {
                    y = other.y+32;
                }
                
                while collision_rectangle(bbox_left,bbox_top-1,bbox_right-1,bbox_top+1,obj_solid,1,0){
                    y++
                    vspeed = 1;
                    jumphit = 1;
                }
                vspeed = 1;
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hello Engine
if dead = 0{
    if global.skin = 1{
        if y &lt; other.y-8 and vspeed &gt;= 0{
            y = other.y-16
            vspeed = 0
            gravity = 0
            if hspeed = 0
            state = 0
            else
            state = 1
            if jumpnow = 2
            jumpnow = 0
            hitpoint = 0
            mountJump = 0;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>select = 0;
global.selected = 0;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Helps out with deselecting terrain
if !instance_exists(obj_drag){
    obj_solidplace.select = 0;
    obj_pipetile.select = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if canMove = 0{
    select = 1;
    global.selected = 1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Spawn shadow
with instance_create(x,y,obj_shadow){
    target = self.instance_id;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index,image_index,x-rideX,y-rideY+bumpOff,image_xscale,image_yscale,image_angle,c_white,image_alpha);

if select = 1{
    if image_xscale != -1{
        draw_set_color(col);
        draw_rectangle(x-8,y,(x+image_xscale*16)-8,y+image_yscale*16,true);
        draw_rectangle(x-7,y+1,(x+image_xscale*16)-9,y+image_yscale*16-1,true);
    } else {
        draw_set_color(col);
        draw_rectangle(x-9+16,y-8+8,(x+image_xscale*16)-9+16,y+image_yscale*16-8+8,true);
        draw_rectangle(x-8+16,y-7+8,(x+image_xscale*16)-10+16,y+image_yscale*16-9+8,true);
    }
}
 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="115">
      <action>
        <libid>1</libid>
        <id>531</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_fullscreen</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>531</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_fullscreen</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles room resetting code
obj_play.alarm[0] = 2;
obj_play.fixAttempt = 0;
/*if obj_play.inEditor = 0{
    
    //Port on Screen
    view_xport[2] = 0;
    view_yport[2] = 0;
    view_wport[2] = 480;
    view_hport[2] = 320;
    
    //View in Room
    view_xview[2] = 0;
    view_yview[2] = 0;
    view_wview[2] = 480;
    view_hview[2] = 320;
    
    //Resetting the game
    obj_player.canMove = 0;
    obj_tileparent.canMove = 0;
    with obj_solid{
        instance_destroy();
    }
    with obj_solidtop{
        instance_destroy();
    }
    with obj_mushroom_tile{
        instance_destroy();
    }
    obj_goombattle.hspeed = 0;
    obj_koopatile.hspeed = 0;
    obj_kooparedtile.hspeed = 0;
    obj_blocktile.asdf = 0;
    obj_pipetile.gone = 0;
    obj_thwomptile.charge = 0;
    with obj_coinslide{
        instance_destroy();
    }
    with obj_powerupeffect{
        instance_destroy();
    }
    with obj_bill{
        instance_destroy();
    }
    with obj_amiiboshroom{
        instance_destroy();
    }
    with obj_saveblock{
        instance_destroy();
    }
    obj_block_parent.hit = 0;
    obj_block_parent.visible = true;
    background_visible[0] = true;
    obj_cointile.collect = 0;
    obj_flagtile.asdfasasd = 0;
    obj_player.qwer = 0;
    invincible = 0;
    invinciblea = 0;
    obj_player.dead = 0;
    obj_enemyparent.dead = 0;
    obj_enemyparent.deadb = 0;
    obj_play.inEditor = 1;
    instance_activate_all();
    
    
    inEditor = 1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
